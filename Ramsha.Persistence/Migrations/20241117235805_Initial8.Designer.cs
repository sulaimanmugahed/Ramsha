// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ramsha.Persistence.Contexts;

#nullable disable

namespace Ramsha.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241117235805_Initial8")]
    partial class Initial8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ramsha.Domain.Baskets.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("InventoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryItemId", "BasketId");

                    b.HasIndex("BasketId");

                    b.ToTable("BasketItems", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Common.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencies", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Customers.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Buyer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Baskets", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Customers.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Customers.Entities.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerAddress", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Inventory.Entities.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InventorySKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StockSelectionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("FinalPrice", "Ramsha.Domain.Inventory.Entities.InventoryItem.FinalPrice#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("ItemFinalPriceAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("int")
                                .HasColumnName("ItemPriceCurrency");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RetailPrice", "Ramsha.Domain.Inventory.Entities.InventoryItem.RetailPrice#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("ItemRetailPriceAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("int")
                                .HasColumnName("ItemRetailPriceCurrency");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("WholesalePrice", "Ramsha.Domain.Inventory.Entities.InventoryItem.WholesalePrice#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("ItemWholesalePriceAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("int")
                                .HasColumnName("ItemWholesalePriceCurrency");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "ProductVariantId");

                    b.HasIndex("SupplierId", "ProductId", "ProductVariantId")
                        .IsUnique()
                        .HasFilter("[SupplierId] IS NOT NULL AND [ProductVariantId] IS NOT NULL");

                    b.ToTable("InventoryItems", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Inventory.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Supplied")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("RetailPrice", "Ramsha.Domain.Inventory.Entities.Stock.RetailPrice#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("StockRetailPriceAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("int")
                                .HasColumnName("StockRetailPriceCurrency");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("WholesalePrice", "Ramsha.Domain.Inventory.Entities.Stock.WholesalePrice#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("StockWholesalePriceAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("int")
                                .HasColumnName("StockWholesalePriceCurrency");
                        });

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("Stocks", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.FulfillmentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("FulfillmentRequest", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FulfillmentRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FulfillmentRequestId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brand", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StackingAllowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupons", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Options", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.OptionValue", b =>
                {
                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionId", "Id");

                    b.ToTable("OptionValue", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHome")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "ProductVariantId");

                    b.HasIndex("SupplierId", "ProductId", "ProductVariantId");

                    b.ToTable("ProductImage", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductOption", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("ProductOption", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductVariant", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("ProductId", "Id");

                    b.ToTable("ProductVariant", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RatingBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId", "ProductId", "ProductVariantId");

                    b.ToTable("Ratings", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.SupplierProduct", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SupplierProducts", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.VariantValue", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionValueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "ProductVariantId", "OptionId", "OptionValueId");

                    b.HasIndex("OptionId", "OptionValueId");

                    b.ToTable("VariantValue", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplierAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplierAddress", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplierVariant", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("SupplierId", "ProductId", "ProductVariantId");

                    b.HasIndex("ProductId", "ProductVariantId");

                    b.ToTable("SupplierVariants", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.Supply", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Sent")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Supply", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplyItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.ToTable("SupplyItem", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplyRequests", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplyRequestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupplyRequestId");

                    b.HasIndex("ProductId", "ProductVariantId");

                    b.HasIndex("SupplierId", "ProductId", "ProductVariantId");

                    b.ToTable("SupplyRequestItem", "Core");
                });

            modelBuilder.Entity("Ramsha.Domain.Baskets.Entities.BasketItem", b =>
                {
                    b.HasOne("Ramsha.Domain.Customers.Entities.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Inventory.Entities.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("Ramsha.Domain.Customers.Entities.CustomerAddress", b =>
                {
                    b.HasOne("Ramsha.Domain.Customers.Entities.Customer", null)
                        .WithOne("Address")
                        .HasForeignKey("Ramsha.Domain.Customers.Entities.CustomerAddress", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Inventory.Entities.InventoryItem", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Ramsha.Domain.Products.Entities.ProductVariant", "ProductVariant")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ramsha.Domain.Products.Entities.SupplierProduct", null)
                        .WithMany()
                        .HasForeignKey("SupplierId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.SupplierVariant", "SupplierVariant")
                        .WithOne("InventoryItem")
                        .HasForeignKey("Ramsha.Domain.Inventory.Entities.InventoryItem", "SupplierId", "ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierVariant");
                });

            modelBuilder.Entity("Ramsha.Domain.Inventory.Entities.Stock", b =>
                {
                    b.HasOne("Ramsha.Domain.Inventory.Entities.InventoryItem", null)
                        .WithMany("Stocks")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ramsha.Domain.Common.Price", "FinalPrice", b1 =>
                        {
                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("StockFinalPriceAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("int")
                                .HasColumnName("StockPriceCurrency");

                            b1.HasKey("StockId");

                            b1.ToTable("Stocks", "Core");

                            b1.WithOwner()
                                .HasForeignKey("StockId");
                        });

                    b.OwnsMany("Ramsha.Domain.Products.Entities.Discount", "Discounts", b1 =>
                        {
                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,6)");

                            b1.HasKey("StockId", "Id");

                            b1.ToTable("Discount", "Core");

                            b1.WithOwner()
                                .HasForeignKey("StockId");
                        });

                    b.Navigation("Discounts");

                    b.Navigation("FinalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.FulfillmentRequest", b =>
                {
                    b.HasOne("Ramsha.Domain.Orders.Entities.Order", "Order")
                        .WithMany("FulfillmentRequests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", "Supplier")
                        .WithMany("FulfillmentRequests")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.Order", b =>
                {
                    b.HasOne("Ramsha.Domain.Customers.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ramsha.Domain.Orders.Entities.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Display")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders", "Core");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.OrderItem", b =>
                {
                    b.HasOne("Ramsha.Domain.Orders.Entities.FulfillmentRequest", null)
                        .WithMany("Items")
                        .HasForeignKey("FulfillmentRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Orders.Entities.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Ramsha.Domain.Orders.Entities.ProductItemOrdered", "ItemOrdered", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("int");

                            b1.Property<Guid>("InventoryItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InventorySKU")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PictureUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItem", "Core");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("ItemOrdered")
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Category", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.OptionValue", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Option", "Option")
                        .WithMany("OptionValues")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Product", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ramsha.Domain.Products.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ramsha.Domain.Products.Entities.SeoSettings", "SeoSettings", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Keywords")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SeoSettings_Keywords");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SeoSettings_MetaDescription");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SeoSettings_MetaTitle");

                            b1.Property<string>("UrlSlug")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SeoSettings_UrlSlug");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products", "Core");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("SeoSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductImage", b =>
                {
                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Ramsha.Domain.Products.Entities.ProductVariant", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ramsha.Domain.Products.Entities.SupplierProduct", null)
                        .WithMany()
                        .HasForeignKey("SupplierId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.SupplierVariant", null)
                        .WithMany("SupplierProductImages")
                        .HasForeignKey("SupplierId", "ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductOption", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Products.Entities.Product", "Product")
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductTag", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Products.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductVariant", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ramsha.Domain.Products.Entities.DimensionalWeight", "Dimensions", b1 =>
                        {
                            b1.Property<Guid>("ProductVariantProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ProductVariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("DimensionalFactor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DimensionalFactor");

                            b1.Property<decimal>("Height")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("HeightDimension");

                            b1.Property<decimal>("Length")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("LengthDimension");

                            b1.Property<decimal>("Width")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("WidthDimension");

                            b1.HasKey("ProductVariantProductId", "ProductVariantId");

                            b1.ToTable("ProductVariant", "Core");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantProductId", "ProductVariantId");
                        });

                    b.Navigation("Dimensions")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Rating", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Product", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Ramsha.Domain.Products.Entities.SupplierProduct", null)
                        .WithMany()
                        .HasForeignKey("SupplierId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.SupplierVariant", null)
                        .WithMany("Ratings")
                        .HasForeignKey("SupplierId", "ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.SupplierProduct", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.VariantValue", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Products.Entities.OptionValue", "OptionValue")
                        .WithMany()
                        .HasForeignKey("OptionId", "OptionValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Products.Entities.ProductVariant", "ProductVariant")
                        .WithMany("VariantValues")
                        .HasForeignKey("ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("OptionValue");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplierAddress", b =>
                {
                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", null)
                        .WithOne("Address")
                        .HasForeignKey("Ramsha.Domain.Suppliers.Entities.SupplierAddress", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplierVariant", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Product", null)
                        .WithMany("SupplierVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Products.Entities.ProductVariant", "ProductVariant")
                        .WithMany("SupplierVariants")
                        .HasForeignKey("ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Products.Entities.SupplierProduct", "SupplierProduct")
                        .WithMany("SupplierVariants")
                        .HasForeignKey("SupplierId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierProduct");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.Supply", b =>
                {
                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", null)
                        .WithMany("Supplies")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplyItem", b =>
                {
                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supply", null)
                        .WithMany("Items")
                        .HasForeignKey("SupplyId");

                    b.OwnsOne("Ramsha.Domain.Suppliers.Entities.ItemSupplied", "ItemSupplied", b1 =>
                        {
                            b1.Property<Guid>("SupplyItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("ProductVariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Sku")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SupplyItemId");

                            b1.ToTable("SupplyItem", "Core");

                            b1.WithOwner()
                                .HasForeignKey("SupplyItemId");
                        });

                    b.Navigation("ItemSupplied")
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplyRequestItem", b =>
                {
                    b.HasOne("Ramsha.Domain.Products.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.SupplyRequest", "SupplyRequest")
                        .WithMany("Items")
                        .HasForeignKey("SupplyRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Products.Entities.ProductVariant", null)
                        .WithMany()
                        .HasForeignKey("ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ramsha.Domain.Suppliers.Entities.SupplierVariant", "SupplierVariant")
                        .WithMany()
                        .HasForeignKey("SupplierId", "ProductId", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SupplierVariant");

                    b.Navigation("SupplyRequest");
                });

            modelBuilder.Entity("Ramsha.Domain.Customers.Entities.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ramsha.Domain.Customers.Entities.Customer", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Ramsha.Domain.Inventory.Entities.InventoryItem", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.FulfillmentRequest", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ramsha.Domain.Orders.Entities.Order", b =>
                {
                    b.Navigation("FulfillmentRequests");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Option", b =>
                {
                    b.Navigation("OptionValues");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Options");

                    b.Navigation("Ratings");

                    b.Navigation("SupplierProducts");

                    b.Navigation("SupplierVariants");

                    b.Navigation("Tags");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.ProductVariant", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("InventoryItems");

                    b.Navigation("SupplierVariants");

                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.SupplierProduct", b =>
                {
                    b.Navigation("SupplierVariants");
                });

            modelBuilder.Entity("Ramsha.Domain.Products.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.Supplier", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("FulfillmentRequests");

                    b.Navigation("SupplierProducts");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplierVariant", b =>
                {
                    b.Navigation("InventoryItem")
                        .IsRequired();

                    b.Navigation("Ratings");

                    b.Navigation("SupplierProductImages");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.Supply", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ramsha.Domain.Suppliers.Entities.SupplyRequest", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
